/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.integradora.view;

import com.mycompany.integradora.Controller.clientesController;
import com.mycompany.integradora.Controller.recoleccionController;
import com.mycompany.integradora.Controller.usuarioController;
import com.mycompany.integradora.Controller.ventaController;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.clientesModel;
import model.recoleccionModel;
import model.usuarioModel;


/**
 *
 * @author Osmar
 */
public class FrmRecoleccion extends javax.swing.JInternalFrame {
    private int idRecolec;
    private int idUsuario=1;
    private int idCliente=1;
     private DefaultTableModel modeloTabla;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FrmRecoleccion.class.getName());

    /**
     * Creates new form FrmRecoleccion
     */
    public FrmRecoleccion() {
         super("Formulario Recoleccion", true, true, true, true);
         modeloTabla = new DefaultTableModel(new Object[]{"Id Recoleccion", "Fecha","Id Cliente","Id Usuario","Detalles"},0);
        tblRecolec = new JTable (modeloTabla);
        initComponents();
        cargarRecoleccion();
        seleccionarRecoleccion();
        obtenerCliente();
      obtenerClienteId();
      obtenerUsuario();
      obtenerUsuarioId();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        lblFecha = new javax.swing.JLabel();
        lblCliente = new javax.swing.JLabel();
        lblUsuario = new javax.swing.JLabel();
        lblDetalle = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        txtMes = new javax.swing.JTextField();
        txtDay = new javax.swing.JTextField();
        txtDetalle = new javax.swing.JTextField();
        cboUsuario = new javax.swing.JComboBox<>();
        cboCliente = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecolec = new javax.swing.JTable();
        btnCrear = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        lblFecha.setText("Fecha de Recoleccion");

        lblCliente.setText("Id Cliente");

        lblUsuario.setText("Usuario");

        lblDetalle.setText("Detalles");

        txtMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMesActionPerformed(evt);
            }
        });

        tblRecolec.setBackground(new java.awt.Color(255, 255, 204));
        tblRecolec.setModel(modeloTabla);
        jScrollPane1.setViewportView(tblRecolec);

        btnCrear.setText("Crear");
        btnCrear.setToolTipText("");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFecha)
                    .addComponent(lblUsuario)
                    .addComponent(lblCliente))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cboUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(txtDay, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(lblDetalle)
                        .addGap(34, 34, 34)
                        .addComponent(txtDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 41, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCrear, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(77, 77, 77))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblFecha))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtDay, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblDetalle))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCliente)
                            .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUsuario)
                            .addComponent(cboUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        // TODO add your handling code here:
        agregarRecoleccion();
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        buscarRecoleccion();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        eliminarRecoleccion();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        actualizarRecoleccion();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void txtMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new FrmRecoleccion().setVisible(true));
    }
/**
 * Métodos para manejar las recolecciones desde la interfaz.
 * Permiten agregar, mostrar, buscar, seleccionar, actualizar y eliminar recolecciones,
 * así como obtener usuarios y clientes para asignarlos a cada recolección.
 */

public void agregarRecoleccion() {
    // Obtiene la fecha y el detalle de los campos de texto
    String year = txtYear.getText();
    String month = txtMes.getText();
    String day = txtDay.getText();
    String date = year + "-" + month + "-" + day;
    String detalle = txtDetalle.getText();

    // Por ahora se usan IDs por defecto
    int idCliente = 1;
    int idUsuario = 1;

    // Verifica que todos los campos estén llenos
    if (year.isEmpty() || month.isEmpty() || day.isEmpty() || detalle.isEmpty()) {
        JOptionPane.showConfirmDialog(this, "Ingresa el nombre del producto o su respectiva descripcion");
    } else {
        // Inserta la recolección en la base de datos
        recoleccionController.insertarRecoleccion(new recoleccionModel(date, idCliente, idUsuario, detalle));

        // Limpia los campos de texto
        txtYear.setText("");
        txtMes.setText("");
        txtDay.setText("");
        txtDetalle.setText("");

        // Recarga la tabla con las recolecciones
        cargarRecoleccion();
    }
}

/**
 * Carga todas las recolecciones en la tabla.
 */
public void cargarRecoleccion() {
    modeloTabla.setRowCount(0); // Limpia la tabla
    List<recoleccionModel> recoleccion = recoleccionController.obtenerTodos(); // Obtiene todas las recolecciones
    for (recoleccionModel r : recoleccion) {
        modeloTabla.addRow(new Object[]{r.getIdRecoleccion(), r.getFecha(), r.getIdCliente(), r.getIdUsuario(), r.getDetalles()});
    }
}

/**
 * Busca recolecciones por fecha y las muestra en la tabla.
 */
public void buscarRecoleccion() {
    String fecha = JOptionPane.showInputDialog(this, "Escribe la fecha de la recoleccion");
    modeloTabla.setRowCount(0); // Limpia la tabla
    List<recoleccionModel> recoleccion = recoleccionController.buscarRecoleccion(fecha);
    for (recoleccionModel r : recoleccion) {
        modeloTabla.addRow(new Object[]{r.getIdRecoleccion(), r.getFecha(), r.getIdCliente(), r.getIdUsuario(), r.getDetalles()});
    }
}

/**
 * Elimina la recolección seleccionada en la tabla.
 */
private void eliminarRecoleccion() {
    int fila = tblRecolec.getSelectedRow();
    if (fila != -1) {
        int id = Integer.parseInt(tblRecolec.getValueAt(fila, 0).toString());
        recoleccionController.eliminarRecoleccion(id); // Llama al controlador para eliminar
        cargarRecoleccion(); // Recarga la tabla
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona un rol para eliminar");
    }
}

/**
 * Selecciona una recolección de la tabla y carga sus datos en los campos de texto.
 */
private void seleccionarRecoleccion() {
    tblRecolec.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) {
            int fila = tblRecolec.getSelectedRow();
            if (fila != -1 && tblRecolec.getRowCount() > 0) {
                idRecolec = Integer.parseInt(tblRecolec.getValueAt(fila, 0).toString());
                String fechaCompleta = tblRecolec.getValueAt(fila, 1).toString();
                txtDetalle.setText(tblRecolec.getValueAt(fila, 4).toString());

                // Separa la fecha en año, mes y día para cargarla en los campos correspondientes
                String[] partesFecha = fechaCompleta.split("-");
                txtYear.setText(partesFecha[0]);
                txtMes.setText(partesFecha[1]);
                txtDay.setText(partesFecha[2]);
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona una venta para actualizar.");
            }
        }
    });
}

/**
 * Actualiza los datos de la recolección seleccionada con la información de los campos de texto.
 */
public void actualizarRecoleccion() {
    String year = txtYear.getText();
    String month = txtMes.getText();
    String day = txtDay.getText();
    String date = year + "-" + month + "-" + day;
    String detalle = txtDetalle.getText();
    int Cliente = idCliente;
    int Usuario = idUsuario;

    if (year.isEmpty() || month.isEmpty() || day.isEmpty() || detalle.isEmpty()) {
        JOptionPane.showConfirmDialog(this, "Ingresa el nombre del producto o su respectiva descripcion");
    } else {
        recoleccionController.actualizarRecoleccion(new recoleccionModel(this.idRecolec, date, Cliente, Usuario, detalle));
        txtYear.setText("");
        txtMes.setText("");
        txtDay.setText("");
        txtDetalle.setText("");

        cargarRecoleccion(); // Recarga la tabla
    }
}

/**
 * Carga los usuarios disponibles en el combobox.
 */
private void obtenerUsuario() {
    cboUsuario.removeAllItems();
    List<usuarioModel> usuarios = usuarioController.obtenerTodos();
    for (usuarioModel usuario : usuarios) {
        cboUsuario.addItem(usuario); // Agrega el objeto completo
    }
}

/**
 * Obtiene el ID del usuario seleccionado en el combobox.
 */
private void obtenerUsuarioId() {
    cboUsuario.addActionListener(e -> {
        usuarioModel seleccionado = (usuarioModel) cboUsuario.getSelectedItem();
        if (seleccionado != null) {
            idUsuario = seleccionado.getIdUsuario();
        }
    });
}

/**
 * Carga los clientes disponibles en el combobox.
 */
private void obtenerCliente() {
    cboCliente.removeAllItems();
    List<clientesModel> clientes = clientesController.obtenerTodos();
    for (clientesModel cliente : clientes) {
        cboCliente.addItem(cliente); // Agrega el objeto completo
    }
}

/**
 * Obtiene el ID del cliente seleccionado en el combobox.
 */
private void obtenerClienteId() {
    cboCliente.addActionListener(e -> {
        clientesModel seleccionado = (clientesModel) cboCliente.getSelectedItem();
        if (seleccionado != null) {
            idCliente = seleccionado.getIdCliente();
        }
    });
}

  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<clientesModel> cboCliente;
    private javax.swing.JComboBox<usuarioModel> cboUsuario;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblDetalle;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTable tblRecolec;
    private javax.swing.JTextField txtDay;
    private javax.swing.JTextField txtDetalle;
    private javax.swing.JTextField txtMes;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
