/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.integradora.view;

import com.mycompany.integradora.Controller.clientesController;
import com.mycompany.integradora.Controller.productosController;
import com.mycompany.integradora.Controller.usuarioController;
import com.mycompany.integradora.Controller.ventaController;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.clientesModel;
import model.productosModel;
import model.usuarioModel;
import model.ventaModel;

/**
 *
 * @author Osmar
 */
public class FrmVentas extends javax.swing.JInternalFrame {
    private DefaultTableModel modeloTabla;
    private int idVenta =0;
    private int idProducto=1,idUsuario=1,idCliente =1;
   
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FrmVentas.class.getName());

    /**
     * Creates new form FrmVentas
     */
    public FrmVentas() {
         super("Formulario Ventas", true, true, true, true);
         modeloTabla = new DefaultTableModel(new Object[]{"Id Venta", "Fecha","Id Usuario","Id Cliente","Cantidad","Id Producto","Precio","Total"},0);
        tblVenta = new JTable (modeloTabla);
        initComponents();
        cargarVenta();
      seleccionarVenta();
      obtenerCliente();
      obtenerClienteId();
      obtenerUsuario();
      obtenerUsuarioId();
      obtenerProducto();
      obtenerProductoId();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cboCliente = new javax.swing.JComboBox<>();
        cboUsuario = new javax.swing.JComboBox<>();
        cboProducto = new javax.swing.JComboBox<>();
        txtYear = new javax.swing.JTextField();
        txtDay = new javax.swing.JTextField();
        txtMonth = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        lblUsuario = new javax.swing.JLabel();
        lblCliente = new javax.swing.JLabel();
        lblProducto = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblCantida = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVenta = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(153, 255, 204));

        txtDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDayActionPerformed(evt);
            }
        });

        lblUsuario.setText("Id del Usuario");

        lblCliente.setText("Id del Cliente");

        lblProducto.setText("Id Producto");

        lblFecha.setText("Fecha de la Venta");

        lblCantida.setText("Cantidad");

        lblPrecio.setText("Precio Unitario");

        lblTotal.setText("Total");

        tblVenta.setModel(modeloTabla);
        jScrollPane1.setViewportView(tblVenta);

        jButton1.setText("Crear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUsuario)
                            .addComponent(lblProducto)
                            .addComponent(lblFecha))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtDay, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                .addComponent(txtMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cboUsuario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboProducto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 266, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPrecio)
                                    .addComponent(lblCantida)
                                    .addComponent(lblTotal))
                                .addGap(67, 67, 67)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(txtPrecio)
                                    .addComponent(txtTotal)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(btnEliminar))
                                .addGap(45, 45, 45)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnActualizar)
                                    .addComponent(btnBuscar))))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addComponent(lblCliente)
                    .addContainerGap(697, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFecha)
                            .addComponent(txtMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDay, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCantida)))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cboUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblUsuario))
                            .addComponent(lblPrecio)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblProducto)
                                    .addComponent(lblTotal))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtTotal))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(lblCliente)
                    .addContainerGap(331, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        agregarVenta();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDayActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        buscarVenta();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        eliminarVenta();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        actualizarVenta();
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new FrmVentas().setVisible(true));
    }
    /**
 * Métodos para manejar ventas desde la interfaz.
 * Permiten agregar, mostrar, buscar, eliminar, seleccionar y actualizar ventas,
 * así como obtener usuarios, clientes y productos para asignarlos a la venta.
 */

/**
 * Agrega una nueva venta.
 * - Obtiene los datos de los campos de texto y seleccionados en combobox.
 * - Valida que no estén vacíos.
 * - Inserta la venta usando ventaController.
 * - Limpia los campos y recarga la tabla.
 */
public void agregarVenta() {
    String year = txtYear.getText();
    String month = txtMonth.getText();
    String day = txtDay.getText();
    String date = year + "-" + month + "-" + day;

    int cantidad = Integer.parseInt(txtCantidad.getText());
    float unitario = Float.parseFloat(txtPrecio.getText());
    float total = Float.parseFloat(txtTotal.getText());

    // Valores por defecto; se pueden cambiar según la selección
    int idCliente = 1;
    int idUsuario = 1;
    int idProducto = 1;

    if (year.isEmpty() || month.isEmpty() || day.isEmpty() || txtPrecio.getText().isEmpty()
        || txtCantidad.getText().isEmpty() || txtTotal.getText().isEmpty()) {
        JOptionPane.showConfirmDialog(this, "Ingresa todos los datos de la venta");
    } else {
        ventaController.insertarVenta(new ventaModel(date, idUsuario, idCliente, cantidad, idProducto, unitario, total));
        txtYear.setText("");
        txtMonth.setText("");
        txtDay.setText("");
        txtCantidad.setText("");
        txtPrecio.setText("");
        txtTotal.setText("");

        cargarVenta();
    }
}

/**
 * Carga todas las ventas en la tabla.
 * - Limpia la tabla.
 * - Obtiene la lista de ventas desde ventaController.
 * - Agrega cada venta como una fila en la tabla.
 */
public void cargarVenta() {
    modeloTabla.setRowCount(0);
    List<ventaModel> ventas = ventaController.obtenerTodos();
    for (ventaModel r : ventas) {
        modeloTabla.addRow(new Object[]{r.getIdVenta(), r.getFecha(), r.getIdUsuario(), r.getIdCliente(),
                                        r.getCantidad(), r.getIdProducto(), r.getPrecio(), r.getTotal()});
    }
}

/**
 * Busca ventas por fecha.
 * - Solicita la fecha al usuario.
 * - Limpia la tabla y carga las ventas que coincidan.
 */
public void buscarVenta() {
    String fecha = JOptionPane.showInputDialog(this, "Escribe una fecha para buscar la venta");
    modeloTabla.setRowCount(0);
    List<ventaModel> ventas = ventaController.buscarVenta(fecha);
    for (ventaModel r : ventas) {
        modeloTabla.addRow(new Object[]{r.getIdVenta(), r.getFecha(), r.getIdUsuario(), r.getIdCliente(),
                                        r.getCantidad(), r.getIdProducto(), r.getPrecio(), r.getTotal()});
    }
}

/**
 * Elimina la venta seleccionada.
 * - Verifica si hay fila seleccionada.
 * - Obtiene el id de la venta y la elimina usando ventaController.
 * - Recarga la tabla.
 */
private void eliminarVenta() {
    int fila = tblVenta.getSelectedRow();
    if (fila != -1) {
        int id = Integer.parseInt(tblVenta.getValueAt(fila, 0).toString());
        ventaController.eliminarVenta(id);
        cargarVenta();
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona una venta para eliminar");
    }
}

/**
 * Selecciona una venta de la tabla.
 * - Llena los campos de texto con los datos de la venta seleccionada.
 * - Obtiene la fecha, cantidad, precio y total.
 * - Inicializa los IDs de producto, cliente y usuario por defecto.
 */
private void seleccionarVenta() {
    tblVenta.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) {
            int fila = tblVenta.getSelectedRow();
            if (fila != -1 && tblVenta.getRowCount() > 0) {
                idVenta = Integer.parseInt(tblVenta.getValueAt(fila, 0).toString());
                String fechaCompleta = tblVenta.getValueAt(fila, 1).toString();

                txtCantidad.setText(tblVenta.getValueAt(fila, 4).toString());
                txtPrecio.setText(tblVenta.getValueAt(fila, 6).toString());
                txtTotal.setText(tblVenta.getValueAt(fila, 7).toString());

                String[] partesFecha = fechaCompleta.split("-");
                txtYear.setText(partesFecha[0]);
                txtMonth.setText(partesFecha[1]);
                txtDay.setText(partesFecha[2]);

                idProducto = 1;
                idUsuario = 1;
                idCliente = 1;
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona una venta para actualizar.");
            }
        }
    });
}

/**
 * Actualiza la venta seleccionada.
 * - Obtiene los datos de los campos de texto y seleccionados.
 * - Valida que no estén vacíos.
 * - Actualiza la venta usando ventaController.
 * - Limpia los campos y recarga la tabla.
 */
private void actualizarVenta() {
    String year = txtYear.getText();
    String month = txtMonth.getText();
    String day = txtDay.getText();
    String date = year + "-" + month + "-" + day;

    int cantidad = Integer.parseInt(txtCantidad.getText());
    float unitario = Float.parseFloat(txtPrecio.getText());
    float total = Float.parseFloat(txtTotal.getText());

    int Cliente = idCliente;
    int Usuario = idUsuario;
    int Producto = idProducto;

    if (year.isEmpty() || month.isEmpty() || day.isEmpty() || txtPrecio.getText().isEmpty()
        || txtCantidad.getText().isEmpty() || txtTotal.getText().isEmpty()) {
        JOptionPane.showConfirmDialog(this, "Ingresa todos los datos de la venta");
    } else {
        ventaController.actualizarVenta(new ventaModel(this.idVenta, date, Usuario, Cliente, cantidad, Producto, unitario, total));
        txtYear.setText("");
        txtMonth.setText("");
        txtDay.setText("");
        txtCantidad.setText("");
        txtPrecio.setText("");
        txtTotal.setText("");

        cargarVenta();
    }
}

/**
 * Obtiene todos los usuarios y los agrega al combobox.
 */
private void obtenerUsuario() {
    cboUsuario.removeAllItems();
    List<usuarioModel> usuarios = usuarioController.obtenerTodos();
    for (usuarioModel usuario : usuarios) {
        cboUsuario.addItem(usuario);
    }
}

/**
 * Obtiene el id del usuario seleccionado.
 */
private void obtenerUsuarioId() {
    cboUsuario.addActionListener(e -> {
        usuarioModel seleccionado = (usuarioModel) cboUsuario.getSelectedItem();
        if (seleccionado != null) {
            idUsuario = seleccionado.getIdUsuario();
        }
    });
}

/**
 * Obtiene todos los clientes y los agrega al combobox.
 */
private void obtenerCliente() {
    cboCliente.removeAllItems();
    List<clientesModel> clientes = clientesController.obtenerTodos();
    for (clientesModel cliente : clientes) {
        cboCliente.addItem(cliente);
    }
}

/**
 * Obtiene el id del cliente seleccionado.
 */
private void obtenerClienteId() {
    cboCliente.addActionListener(e -> {
        clientesModel seleccionado = (clientesModel) cboCliente.getSelectedItem();
        if (seleccionado != null) {
            idCliente = seleccionado.getIdCliente();
        }
    });
}

/**
 * Obtiene todos los productos y los agrega al combobox.
 */
private void obtenerProducto() {
    cboProducto.removeAllItems();
    List<productosModel> productos = productosController.obtenerTodos();
    for (productosModel producto : productos) {
        cboProducto.addItem(producto);
    }
}

/**
 * Obtiene el id del producto seleccionado.
 */
private void obtenerProductoId() {
    cboProducto.addActionListener(e -> {
        productosModel seleccionado = (productosModel) cboProducto.getSelectedItem();
        if (seleccionado != null) {
            idProducto = seleccionado.getId();
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<clientesModel> cboCliente;
    private javax.swing.JComboBox<productosModel> cboProducto;
    private javax.swing.JComboBox<usuarioModel> cboUsuario;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCantida;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblProducto;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTable tblVenta;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtDay;
    private javax.swing.JTextField txtMonth;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
