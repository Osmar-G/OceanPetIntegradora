/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.integradora.view;


import com.mycompany.integradora.Controller.productosController;
import com.mycompany.integradora.Controller.rolController;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.productosModel;
import model.rolModel;


/**
 *
 * @author Osmar
 */
public class Productos extends javax.swing.JInternalFrame {
     private DefaultTableModel modeloTabla;
     private int idProducto;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Productos.class.getName());

    /**
     * Creates new form Productos
     */
    public Productos() {
         super("Formulario Productos", true, true, true, true);
        modeloTabla = new DefaultTableModel(new Object[]{"Id Producto", "Nombre Producto","Descripcion","Precio"},0);
        tblProductos = new JTable (modeloTabla);
        cargarProducto();
        seleccionarProducto();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblNombre = new javax.swing.JLabel();
        lblDescripcion = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        btnCrear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        lblNombre.setText("Nombre del Producto");

        lblDescripcion.setText("Descripcion del Producto");

        lblPrecio.setText("Precio");

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        txtPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioActionPerformed(evt);
            }
        });

        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        tblProductos.setModel(modeloTabla);
        jScrollPane1.setViewportView(tblProductos);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPrecio)
                        .addGap(49, 49, 49)
                        .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBuscar)
                            .addComponent(btnActualizar)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNombre)
                            .addComponent(lblDescripcion))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtNombre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCrear))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                                .addComponent(btnEliminar)))
                        .addGap(11, 11, 11)))
                .addGap(43, 43, 43))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNombre)
                        .addComponent(btnCrear))
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDescripcion)
                        .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnEliminar))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(28, 28, 28)
                            .addComponent(lblPrecio))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)))
                .addGap(18, 18, 18)
                .addComponent(btnActualizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        // TODO add your handling code here:
        agregarProducto();
    }//GEN-LAST:event_btnCrearActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void txtPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        buscarProducto();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        eliminarProducto();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        actualizarProducto();
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Productos().setVisible(true));
    }
    /**
 * Métodos para manejar productos desde la interfaz.
 * Permiten agregar, mostrar, buscar, eliminar, seleccionar y actualizar productos.
 */

/**
 * Agrega un nuevo producto.
 * - Obtiene los datos de los campos de texto.
 * - Valida que el nombre y la descripción no estén vacíos.
 * - Inserta el producto usando productosController.
 * - Limpia los campos y recarga la tabla de productos.
 */
public void agregarProducto() {
    String nombreProducto = txtNombre.getText();
    String descripcion = txtDescripcion.getText();
    float precio = Float.valueOf(txtPrecio.getText());

    if (nombreProducto.isEmpty() || descripcion.isEmpty()) {
        JOptionPane.showConfirmDialog(this, "Ingresa el nombre del producto o su respectiva descripcion");
    } else {
        productosController.insertarProducto(new productosModel(nombreProducto, descripcion, precio));
        txtNombre.setText("");
        txtPrecio.setText("");
        txtDescripcion.setText("");
        cargarProducto();
    }
}

/**
 * Carga todos los productos en la tabla.
 * - Limpia la tabla.
 * - Obtiene la lista de productos desde productosController.
 * - Agrega cada producto como una fila en la tabla.
 */
public void cargarProducto() {
    modeloTabla.setRowCount(0);
    List<productosModel> productos = productosController.obtenerTodos();
    for (productosModel r : productos) {
        modeloTabla.addRow(new Object[]{r.getId(), r.getNombre(), r.getDescripcion(), r.getPrecio()});
    }
}

/**
 * Busca productos por nombre.
 * - Solicita el nombre al usuario.
 * - Limpia la tabla y carga los productos que coincidan.
 */
public void buscarProducto() {
    String nombre = JOptionPane.showInputDialog(this, "Ingresa el nombre del Producto");
    modeloTabla.setRowCount(0);
    List<productosModel> productos = productosController.buscarProducto(nombre);
    for (productosModel r : productos) {
        modeloTabla.addRow(new Object[]{r.getId(), r.getNombre(), r.getDescripcion(), r.getPrecio()});
    }
}

/**
 * Elimina el producto seleccionado.
 * - Verifica si hay fila seleccionada.
 * - Obtiene el id del producto y lo elimina usando productosController.
 * - Recarga la tabla de productos.
 */
private void eliminarProducto() {
    int fila = tblProductos.getSelectedRow();
    if (fila != -1) {
        int id = Integer.parseInt(tblProductos.getValueAt(fila, 0).toString());
        productosController.eliminarProducto(id);
        cargarProducto();
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona un producto para eliminar");
    }
}

/**
 * Selecciona un producto de la tabla.
 * - Llena los campos de texto con los datos del producto seleccionado.
 * - Obtiene el id, nombre, descripción y precio del producto.
 */
private void seleccionarProducto() {
    tblProductos.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) {
            int fila = tblProductos.getSelectedRow();
            if (fila != -1 && tblProductos.getRowCount() > 0) {
                idProducto = Integer.parseInt(tblProductos.getValueAt(fila, 0).toString());
                txtNombre.setText(tblProductos.getValueAt(fila, 1).toString());
                txtDescripcion.setText(tblProductos.getValueAt(fila, 2).toString());
                txtPrecio.setText(tblProductos.getValueAt(fila, 3).toString());
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona un producto para actualizar.");
            }
        }
    });
}

/**
 * Actualiza el producto seleccionado.
 * - Obtiene los datos de los campos de texto.
 * - Valida que el nombre y la descripción no estén vacíos.
 * - Actualiza el producto usando productosController.
 * - Limpia los campos y recarga la tabla de productos.
 */
public void actualizarProducto() {
    String nombreProducto = txtNombre.getText();
    String descripcion = txtDescripcion.getText();
    float precio = Float.valueOf(txtPrecio.getText());

    if (nombreProducto.isEmpty() || descripcion.isEmpty()) {
        JOptionPane.showConfirmDialog(this, "Ingresa el nombre del producto o su respectiva descripcion");
    } else {
        productosController.actualizarProducto(new productosModel(this.idProducto, nombreProducto, descripcion, precio));
        txtNombre.setText("");
        txtPrecio.setText("");
        txtDescripcion.setText("");
        cargarProducto();
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
